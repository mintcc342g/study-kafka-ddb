package main

import (
	"fmt"
	"runtime"
	"study-kafka-ddb/conf"

	"github.com/gin-contrib/cors"
	"github.com/gin-gonic/gin"
	"go.uber.org/zap"
)

const (
	banner = "\n" +
		":'######::'########:'##::::'##:'########::'##:::'##::::::::::'##:::'##::::'###::::'########:'##:::'##::::'###:::::::::::::'########::'########::'########::\n" +
		"'##... ##:... ##..:: ##:::: ##: ##.... ##:. ##:'##::::::::::: ##::'##::::'## ##::: ##.....:: ##::'##::::'## ##:::::::::::: ##.... ##: ##.... ##: ##.... ##:\n" +
		" ##:::..::::: ##:::: ##:::: ##: ##:::: ##::. ####:::::::::::: ##:'##::::'##:. ##:: ##::::::: ##:'##::::'##:. ##::::::::::: ##:::: ##: ##:::: ##: ##:::: ##:\n" +
		". ######::::: ##:::: ##:::: ##: ##:::: ##:::. ##::::'#######: #####::::'##:::. ##: ######::: #####::::'##:::. ##:'#######: ##:::: ##: ##:::: ##: ########::\n" +
		":..... ##:::: ##:::: ##:::: ##: ##:::: ##:::: ##::::........: ##. ##::: #########: ##...:::: ##. ##::: #########:........: ##:::: ##: ##:::: ##: ##.... ##:\n" +
		"'##::: ##:::: ##:::: ##:::: ##: ##:::: ##:::: ##::::::::::::: ##:. ##:: ##.... ##: ##::::::: ##:. ##:: ##.... ##:::::::::: ##:::: ##: ##:::: ##: ##:::: ##:\n" +
		". ######::::: ##::::. #######:: ########::::: ##::::::::::::: ##::. ##: ##:::: ##: ##::::::: ##::. ##: ##:::: ##:::::::::: ########:: ########:: ########::\n" +
		":......::::::..::::::.......:::........::::::..::::::::::::::..::::..::..:::::..::..::::::::..::::..::..:::::..:::::::::::........:::........:::........:::\n" +
		" => Starting listen %s\n"
)

func init() {
	runtime.GOMAXPROCS(runtime.NumCPU())
}

func main() {
	configs := conf.Get()

	r := echoInit(configs)

	startServer(configs, r)
}

func echoInit(configs *conf.ViperConfig) (r *gin.Engine) {
	r = gin.New()

	// Middleware
	r.Use(gin.Recovery())

	// CORS
	r.Use(cors.Default())

	return r
}

func startServer(configs *conf.ViperConfig, r *gin.Engine) {
	apiServer := fmt.Sprintf("0.0.0.0:%d", configs.GetInt("port"))
	fmt.Println(fmt.Sprintf(banner, apiServer))
	if err := r.Run(apiServer); err != nil {
		zap.S().Fatal(err)
	}
}
